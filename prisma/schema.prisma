// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = "native"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Temporarily remove bottom code block to avoid BetterAuth generate throwing errors
generator prismabox { 
  provider = "prismabox"
  typeboxImportDependencyName = "elysia"
  typeboxImportVariableName = "t"
  inputModel = true
  output   = "../src/generated/prismabox"
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  profile    Profile?  @relation("user_profile")

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  type         OrgType // e.g. "vet_clinic", "pet_store", "shelter"
  address      Address? @relation("org_address")
  contactEmail String?
  phone        String?
  licenseId    String? // government-issued vet license
  services     Json? // ["vaccination", "surgery", "boarding", ...]
  isActive     Boolean  @default(false)

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Profile {
  id          String   @id @default(cuid())
  firstname   String
  lastname    String
  gender      Gender
  dateOfBirth DateTime
  idNumber    String   @unique
  idType      IdType
  userId      String   @unique
  user        User     @relation("user_profile", fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique(id)
}

model Address {
  id           String       @id @default(uuid())
  number       String
  street       String
  city         String
  province     String
  orgId        String       @unique
  organization Organization @relation("org_address", fields: [orgId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum IdType {
  NRC
  PASSPORT
}

enum OrgType {
  CLINIC
  STORE
  SHELTER
}
